// <auto-generated />
using System;
using EntryTask.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntryTask.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250310083747_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("EntryTask.Domain.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Credits = 3,
                            Description = "Basic introduction to calculus.",
                            TeacherId = 1,
                            Title = "Calculus I"
                        },
                        new
                        {
                            Id = 2,
                            Credits = 4,
                            Description = "Study of vectors, matrices, and linear transformations.",
                            TeacherId = 1,
                            Title = "Linear Algebra"
                        },
                        new
                        {
                            Id = 3,
                            Credits = 3,
                            Description = "Introduction to quantum physics.",
                            TeacherId = 2,
                            Title = "Quantum Mechanics"
                        },
                        new
                        {
                            Id = 4,
                            Credits = 4,
                            Description = "Exploring subatomic particles and interactions.",
                            TeacherId = 2,
                            Title = "Particle Physics"
                        },
                        new
                        {
                            Id = 5,
                            Credits = 3,
                            Description = "Learn basic programming concepts.",
                            TeacherId = 3,
                            Title = "Programming Fundamentals"
                        },
                        new
                        {
                            Id = 6,
                            Credits = 4,
                            Description = "Introduction to common data structures.",
                            TeacherId = 3,
                            Title = "Data Structures"
                        },
                        new
                        {
                            Id = 7,
                            Credits = 3,
                            Description = "Study of organic compounds and reactions.",
                            TeacherId = 4,
                            Title = "Organic Chemistry"
                        },
                        new
                        {
                            Id = 8,
                            Credits = 3,
                            Description = "Exploring the molecular mechanisms of life.",
                            TeacherId = 5,
                            Title = "Molecular Biology"
                        });
                });

            modelBuilder.Entity("EntryTask.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Students", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alice.brown@email.com",
                            EnrollmentDate = new DateTime(2022, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Alice Brown"
                        },
                        new
                        {
                            Id = 2,
                            Email = "bob.wilson@email.com",
                            EnrollmentDate = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bob Wilson"
                        },
                        new
                        {
                            Id = 3,
                            Email = "charlie.davis@email.com",
                            EnrollmentDate = new DateTime(2022, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Charlie Davis"
                        },
                        new
                        {
                            Id = 4,
                            Email = "diana.miller@email.com",
                            EnrollmentDate = new DateTime(2023, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Diana Miller"
                        },
                        new
                        {
                            Id = 5,
                            Email = "edward.thompson@email.com",
                            EnrollmentDate = new DateTime(2022, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Edward Thompson"
                        },
                        new
                        {
                            Id = 6,
                            Email = "fiona.garcia@email.com",
                            EnrollmentDate = new DateTime(2023, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fiona Garcia"
                        },
                        new
                        {
                            Id = 7,
                            Email = "george.martinez@email.com",
                            EnrollmentDate = new DateTime(2022, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "George Martinez"
                        },
                        new
                        {
                            Id = 8,
                            Email = "hannah.lee@email.com",
                            EnrollmentDate = new DateTime(2023, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hannah Lee"
                        });
                });

            modelBuilder.Entity("EntryTask.Domain.Entities.StudentCourse", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentCourses", (string)null);

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            CourseId = 1,
                            EnrollmentDate = new DateTime(2022, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentId = 1,
                            CourseId = 3,
                            EnrollmentDate = new DateTime(2022, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentId = 1,
                            CourseId = 5,
                            EnrollmentDate = new DateTime(2022, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentId = 2,
                            CourseId = 2,
                            EnrollmentDate = new DateTime(2023, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentId = 2,
                            CourseId = 6,
                            EnrollmentDate = new DateTime(2023, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentId = 3,
                            CourseId = 3,
                            EnrollmentDate = new DateTime(2022, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentId = 3,
                            CourseId = 4,
                            EnrollmentDate = new DateTime(2022, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentId = 4,
                            CourseId = 7,
                            EnrollmentDate = new DateTime(2023, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentId = 4,
                            CourseId = 8,
                            EnrollmentDate = new DateTime(2023, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentId = 5,
                            CourseId = 5,
                            EnrollmentDate = new DateTime(2022, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentId = 5,
                            CourseId = 6,
                            EnrollmentDate = new DateTime(2022, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentId = 6,
                            CourseId = 1,
                            EnrollmentDate = new DateTime(2023, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentId = 6,
                            CourseId = 2,
                            EnrollmentDate = new DateTime(2023, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentId = 7,
                            CourseId = 1,
                            EnrollmentDate = new DateTime(2022, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentId = 7,
                            CourseId = 5,
                            EnrollmentDate = new DateTime(2022, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentId = 7,
                            CourseId = 8,
                            EnrollmentDate = new DateTime(2022, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentId = 8,
                            CourseId = 3,
                            EnrollmentDate = new DateTime(2023, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentId = 8,
                            CourseId = 7,
                            EnrollmentDate = new DateTime(2023, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EntryTask.Domain.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Teachers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "john.smith@email.com",
                            Name = "John Smith"
                        },
                        new
                        {
                            Id = 2,
                            Email = "sarah.johnson@email.com",
                            Name = "Sarah Johnson"
                        },
                        new
                        {
                            Id = 3,
                            Email = "michael.brown@email.com",
                            Name = "Michael Brown"
                        },
                        new
                        {
                            Id = 4,
                            Email = "emily.davis@email.com",
                            Name = "Emily Davis"
                        },
                        new
                        {
                            Id = 5,
                            Email = "david.wilson@email.com",
                            Name = "David Wilson"
                        });
                });

            modelBuilder.Entity("EntryTask.Domain.Entities.Course", b =>
                {
                    b.HasOne("EntryTask.Domain.Entities.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EntryTask.Domain.Entities.StudentCourse", b =>
                {
                    b.HasOne("EntryTask.Domain.Entities.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntryTask.Domain.Entities.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EntryTask.Domain.Entities.Course", b =>
                {
                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("EntryTask.Domain.Entities.Student", b =>
                {
                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("EntryTask.Domain.Entities.Teacher", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
