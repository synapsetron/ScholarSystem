// <auto-generated />
using System;
using EntryTask.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntryTask.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250308094256_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.Property<int>("CoursesId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.HasKey("CoursesId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("CourseStudent");

                    b.HasData(
                        new
                        {
                            CoursesId = 1,
                            StudentsId = 1
                        },
                        new
                        {
                            CoursesId = 3,
                            StudentsId = 1
                        },
                        new
                        {
                            CoursesId = 5,
                            StudentsId = 1
                        },
                        new
                        {
                            CoursesId = 2,
                            StudentsId = 2
                        },
                        new
                        {
                            CoursesId = 6,
                            StudentsId = 2
                        },
                        new
                        {
                            CoursesId = 3,
                            StudentsId = 3
                        },
                        new
                        {
                            CoursesId = 4,
                            StudentsId = 3
                        },
                        new
                        {
                            CoursesId = 7,
                            StudentsId = 4
                        },
                        new
                        {
                            CoursesId = 8,
                            StudentsId = 4
                        },
                        new
                        {
                            CoursesId = 5,
                            StudentsId = 5
                        },
                        new
                        {
                            CoursesId = 6,
                            StudentsId = 5
                        },
                        new
                        {
                            CoursesId = 1,
                            StudentsId = 6
                        },
                        new
                        {
                            CoursesId = 2,
                            StudentsId = 6
                        },
                        new
                        {
                            CoursesId = 1,
                            StudentsId = 7
                        },
                        new
                        {
                            CoursesId = 5,
                            StudentsId = 7
                        },
                        new
                        {
                            CoursesId = 8,
                            StudentsId = 7
                        },
                        new
                        {
                            CoursesId = 3,
                            StudentsId = 8
                        },
                        new
                        {
                            CoursesId = 7,
                            StudentsId = 8
                        });
                });

            modelBuilder.Entity("EntryTask.Domain.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TeacherId = 1,
                            Title = "Calculus I"
                        },
                        new
                        {
                            Id = 2,
                            TeacherId = 1,
                            Title = "Linear Algebra"
                        },
                        new
                        {
                            Id = 3,
                            TeacherId = 2,
                            Title = "Quantum Mechanics"
                        },
                        new
                        {
                            Id = 4,
                            TeacherId = 2,
                            Title = "Particle Physics"
                        },
                        new
                        {
                            Id = 5,
                            TeacherId = 3,
                            Title = "Programming Fundamentals"
                        },
                        new
                        {
                            Id = 6,
                            TeacherId = 3,
                            Title = "Data Structures"
                        },
                        new
                        {
                            Id = 7,
                            TeacherId = 4,
                            Title = "Organic Chemistry"
                        },
                        new
                        {
                            Id = 8,
                            TeacherId = 5,
                            Title = "Molecular Biology"
                        });
                });

            modelBuilder.Entity("EntryTask.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Students", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(2000, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Alice Brown"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(2001, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bob Wilson"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(2000, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Charlie Davis"
                        },
                        new
                        {
                            Id = 4,
                            DateOfBirth = new DateTime(2001, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Diana Miller"
                        },
                        new
                        {
                            Id = 5,
                            DateOfBirth = new DateTime(2000, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Edward Thompson"
                        },
                        new
                        {
                            Id = 6,
                            DateOfBirth = new DateTime(2001, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fiona Garcia"
                        },
                        new
                        {
                            Id = 7,
                            DateOfBirth = new DateTime(2000, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "George Martinez"
                        },
                        new
                        {
                            Id = 8,
                            DateOfBirth = new DateTime(2001, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hannah Lee"
                        });
                });

            modelBuilder.Entity("EntryTask.Domain.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Teachers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "John Smith",
                            Subject = "Mathematics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sarah Johnson",
                            Subject = "Physics"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Michael Brown",
                            Subject = "Computer Science"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Emily Davis",
                            Subject = "Chemistry"
                        },
                        new
                        {
                            Id = 5,
                            Name = "David Wilson",
                            Subject = "Biology"
                        });
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.HasOne("EntryTask.Domain.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntryTask.Domain.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntryTask.Domain.Entities.Course", b =>
                {
                    b.HasOne("EntryTask.Domain.Entities.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EntryTask.Domain.Entities.Teacher", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
